/*
***********************************************************************************************************************************************************

												Levenberg-Marquardt Algorithm 
														Main Program

Author: Omkar Junnarkar, Semester-3 MSc. Computational Material Science
Matriculation Nr.: 66157	Email: omkar.junnarkar@student.tu-freiberg.de
IDE : Microsoft Visual Studio 2019
													PERSONAL PROGRAMMING PROJECT

External Libraries/Resources:

Eigen : https://eigen.tuxfamily.org/dox/							Owner: TuxFamily
RapidCSV : https://github.com/d99kris/rapidcsv						Author: Kristofer Berggren
GNUPLOT-IOSTREAM : https://github.com/dstahlke/gnuplot-iostream		Author: Dan Stahlke
Microsoft VCPKG :  https://github.com/Microsoft/vcpkg				Owner: Microsoft

Objective:	 To obtain parameters of a polynomial implementing Levenberg-Marquardt Algorithm (damped least squares) [ Refer Report/Manual ]
Input:		 Measured Data, Initial Guess of Parameters, Equation Type 
Output:		 Parameters of the equation, Plot showing comparision of Obtained and Fitted Values, CSV Files containing Computed Hessians, Propogation of Damping Factor Lambda & Error Propogation 

Steps:	1. Make sure the environment is set for C++17 (Necessary for GNUPLOT Interface)
		2. Make sure the Configuration is set correctly. (Author Config.: Release x64)
		3. Install GNUPLOT from http://gnuplot.info/download.html
		4. Clone git rep https://github.com/Microsoft/vcpkg.git
		5. Open vcpkg directory from Terminal, Use Command: .\bootstrap-vcpkg.bat
		6. Install vcpkg boost from terminal, Use Command: vcpkg install boost:x64-windows boost:x86-windows
		7. Use vcpkg.exe to install & integrate, Use Commands: .\vcpkg.exe install boost:x64-windows boost:x86-windows ; .\vcpkg.exe integrate install
		8. Download Eigen and Rapid CSV from above mentioned links, Extract the Folders, Add in Properties > Additional Include Directories > Eigen,RapidCSV
		9. Edit the 'function_y()' in 'functions.cpp' accroding to the order of equation to be fit.
		10. Obtain (x & y) measured data by running python script 'DataGenerator.py'
		10. Change the quantity of Initial Deflection Values in 'initial_deflection' array in 'main.cpp'.
		11. Input the initial guess of Parameters in 'parameter_guess' array in 'main.cpp' and run the Main Program.
		12. If required, change the value of 'Lambda' from 'LevenbergMarquardtFit()' in 'functions.cpp'.

*/

/*
*
iostream: For Input-Output of the C++ Program
Eigen/Dense: For Using Dense Matrix Interface of Linear Algebra Library Eigen
iomanip: To manipulate the number of decimal places in output
fstream: To create the stream of file and write
vector: To use vectors data type during file reading
src/rapidcsv: To read CSV files
fucntions.h: Contains the Fitting Routine Header
plotme.h: Plotting Routine header file

*/

#include<iostream>
#include<Eigen/Dense>
#include<iomanip>
#include<fstream>
#include<math.h>
#include<vector>
#include"src/rapidcsv.h"
#include"functions.h"
#include"plotme.h"

/*-----------------------------------------------------------------------------------------------------------------------------------------------------------*/

/*
To reduce the effort of specifying libraries/class for each command/data type
*/
using namespace std;
using namespace Eigen;
using namespace rapidcsv;

/*-----------------------------------------------------------------------------------------------------------------------------------------------------------*/
/*
Main Program, consists of: Data Sourcing from Input and CSV Files, Obtaining Parameters from Levenberg-Marquardt Fit Routine
Arguments: None

Variables:-

data_size : The number of data points in measured file 'y_measured.csv' and input 'x_data.csv' generated by running 'DataGenerator.py'
parameters_guess : Initial Guess of Parameters
initial_deflection : Deflection for Parameters to compute Jacobian using Finite Difference Scheme
Parameters : Fitted Parameters obtained by running fitting Routine

Files Created:

final_fit.csv : Data Points generated using obtained Parameters
Hessians.csv : Hessians computed in each iteration
ErrorNorm.csv : Values of errors from all iterations of fitting routine
DampingFactorPropagation.csv : Value of Damping Factor Lambda after each Iteration
OutputLog.txt : Infornmation regarding Guessed and Obtained Parameters

*/
void main() {

	cout << "Main program started..." << endl;

	/*	
	*	Document : Class from 'rapdcsv' library for reading CSV Files, dx: Instance of Document class
		Reading Values from '.csv' files and writing to Vectors, followed by Eigen Matrix
		ofstream : Class for the file stream from 'std' library
	*/

	Document dx("xdata.csv");
	Document dy("y_measured.csv");
	ofstream output("OutputLog.txt");

	vector<double> xcol = dx.GetColumn<double>(0);
	vector<double> ycol = dy.GetColumn<double>(0);
	
	int data_size = ycol.size();

	/*
		MatrixXd : Data Type from Eigen Library
		Meaning: Matrix - X - d : Matrix with 'X', i.e, expandable dimensions with 'd', i.e 'double' type elements value
		Size can be specified in Brackets, for eg.: MatrixXd Example(10,4);

		Note: In the Program, Instead of Array, Only Matrices have been used to keep avoid any errors of data type computations
	*/

	MatrixXd xdata(ycol.size(), 1);
	MatrixXd y_measured(ycol.size(), 1);

	for (int u = 0; u < data_size; u++) {
		xdata(u, 0) = xcol[u];
		y_measured(u, 0) = ycol[u];
	}

	/* Edit the Initial Guess for parameters here*/
	MatrixXd parameters_guess{
		{0.4,10,-0.2,10,1.5,-2.8}  
	};

	/* Edit the Initial Deflection for parameters here*/
	MatrixXd initial_deflection{
		{1e-8,1e-8,1e-8,1e-8,1e-8,1e-8}	
	};

	parameters_guess = parameters_guess.reshaped(parameters_guess.cols(), 1);
	initial_deflection = initial_deflection.reshaped(parameters_guess.rows(), 1);

	cout << "Data sourced, calling LMA. \n";

	MatrixXd Parameters = LevenbergMarquardtFit(parameters_guess, initial_deflection, y_measured, xdata);

	cout << "\nParameters = \n" << Parameters << endl;
	cout << "Computation Done ! " << endl;
	
	/*
		Writing the Output Database
	*/
	output << "Initial Guess of Parameters : \n" << endl;
	output << parameters_guess << endl;
	output << "\n---------------------------------------------------------------------------------\n";
	output << "Obtained Parameters : \n" << endl;
	output << Parameters << endl;

	output.close();

	ofstream myfitfile("final_fit.csv");

	/* Final Fit from Obtained Parameters */
	MatrixXd final_fit = function_y(Parameters, xdata);
	/* Writing to a csv file */
	for (int num = 0; num < final_fit.rows(); num++) {
		myfitfile << final_fit(num, 0) << endl;
	}

	myfitfile.close();

	cout << "Activating GNUPLOT using vcpkg and gnupuplot-iostream..\n";
	
	/*
	Calling the plot() function from 'plotme.h'
	Arguments: None
	[ See plotme.cpp for Details ]
	*/

	plot();
}

